{
	"log Printing": {
		"prefix": "jslog",
		"body": [
			"console.log( $1, '$1');"
		],
		"description": "打印日志 console.log();"
	},
	"函数组件模板": {
		"prefix": "funcCompont",
		"body": [
			"interface Props {}",
			"const $1: React.FC<Props> = ((prop) => {",
			"    return (",
					"<View>",
					"</View>",
				");",
			"});",
			"export default $1;"
		],
		"description": "函数组件模板"
	},
    "基础列表页": {
		"prefix": "listTable",
		"body": [
			"/**********************/",
            "//  ./config.tsx",

            "import { FromConfig } from '@/components/searchForm/interfaceSearchForm';",

            "export interface columnsObj {",
                "title: string;",
                "dataIndex: string;",
                "key: string;",
                "sorter?: boolean;",
                "width?: number;",
                "filterDropdown?: boolean;",
                "filterIcon?: () => {};",
                "render?: (_: string, record: any) => JSX.Element;",
            "}",

            "export interface CONFIGTYPE {",
                "search: FromConfig;",
                "columns: Array<columnsObj>;",
            "}",

            "let CONFIG: CONFIGTYPE = {",
                "search: {",
                    "from: []",
                "},",
                "columns: []",
            "}",

           "export default CONFIG;",

            "/**********************/",


            "import React,{ useState } from 'react';",
            "import {  Button,  Table, Space, message, Modal } from 'antd';",

            "import getDataList,{  } from '@/service/xxx';",
            "import editDataValue,{  } from '@/service/xxx';",

            "import { pagesType } from '@/utils/interfaceConfigType';",
            "import CONFIG,{ columnsObj } from './config';",

            "import './index.less';",
           "import { config } from 'localforage';",
            "const Index: React.FC = (props) => {",
                "const [isModalVisible, setIsModalVisible] = useState(false);",
               "const [selectedRowKeys, setSelectedRowKeys] = useState([]);",
                "const [seleteData, setseleteData] = useState<Array<columnsObj>>([]);",
                "const [listTotal, setListTotal] = useState(0);",
                "const [pages, setPages] = useState<pagesType>({",
                        "current: 1,",
                        "size: 10",
                "})",

                "const [dataSource, setDataSource] = useState([]);",
                
                "const [columns, setColumns] = useState<Array<columnsObj>>([",
                       " ...CONFIG.columns,",
                        "{",
                        "title: '操作',",
                        "dataIndex: 'names',",
                        "key: 'names',",
                        "width: 100,",
                        "render: (_: string, record: any) => {",
                            "return (",
                                "<Space>",
                                    "<Button type='text' size='middle' onClick={()=>{}}>xx</Button>",
                               " </Space>",
                            ");",
                       " }",
                   " }",
                "])",

               " const rowSelection = {",
                    "selectedRowKeys:selectedRowKeys,",
                    "onChange: (selectedRowKeys: any, selectedRows: any)=>{ ",
                        "setseleteData(selectedRows);",
                        "setSelectedRowKeys(selectedRowKeys);",
                   " }",
                "};",

                "const editData = (param:getDataType) => {",
                    "try {",
                        "editDataValue(param).then((res:DataResType)=>{",
                            "if(res.succus){",
                                "setDataSource(res.data);",
                                "setListTotal(res.total);",
                            "}else{",
                                "message.warning('');",
                            "}",
                        "})",
                   " } catch (error) {",
                        "message.warning('');",
                    "}",
                "}",


                "const getData = (param:getDataType) => {",
                   " try {",
                        "getDataList(param).then((res:DataResType)=>{",
                            "if(res.succus){",
                                "setDataSource(res.data);",
                                "setListTotal(res.total);",
                            "}else{",
                               " message.warning('');",
                            "}",
                        "})",
                    "} catch (error) {",
                        "message.warning('');",
                    "}",
                "}",

                "const handleOk = (val: any) =>{",
                "}",

                "const handleCancel = (val: any) =>{",
                   " setIsModalVisible(false);",
                "}",

                "const onFinish = (val: any) =>{",
                "setPages({",
                        "current: 1,",
                        "size: 10",
                "})",
                    "getData({",
                        "...pages,",
                       " ...val",
                   " });",
               " }",

            "return (",
                "<div className='XXX'>",
                    "<div className='XXX'>",
                        "<Search config={CONFIG.search} onFinish={onFinish}></Search>",
                   " </div>",

                    "<div className='wares-library-list-release-table'>",
                       " <Table ",
                          "  dataSource={dataSource} ",
                           " columns={columns}",
                           " pagination={{",
                            "    showQuickJumper: true,",
                            "    defaultCurrent: pages.current,",
                            "    total: listTotal,",
                            "    onChange:(val,pageSize)=>{",
                            "        getData({",
                             "           current: val,",
                              "          size: pageSize || pages.size",
                               "     })",
                                "    setPages({",
                                 "       current: val,",
                                  "      size: pageSize || pages.size",
                                   " })",
                                "},",
                           " }}",
                           " rowSelection={rowSelection} />",
                    "</div>",

                    "<Modal ",
                     "   title='Basic Modal' ",
                      "  maskClosable={false}",
                       " visible={isModalVisible} ",
                        "onOk={handleOk} ",
                        "onCancel={handleCancel}>",
                        "<p>Some contents...</p>",
                    "</Modal>",
                "</div>",
           " );",
           " };",
            "export default Index;",
		],
		"description": "模块方法"
	},
	
}
